const data = require('./data/premium-brands-unified.json');

console.log('='.repeat(60));
console.log('üìä LUNUS Ï†úÌíà Í∞ÄÍ≤© Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏');
console.log('='.repeat(60));
console.log(`Ï†ÑÏ≤¥ Ï†úÌíà Ïàò: ${data.length}Í∞ú\n`);

// Í∞ÄÍ≤© Ïù¥ÏÉÅ Îç∞Ïù¥ÌÑ∞ Í≤ÄÏÇ¨
const priceIssues = data.filter(p =>
  !p.price ||
  p.price === 0 ||
  p.price < 0 ||
  p.price > 100000000 ||
  typeof p.price !== 'number'
);

console.log('üö® Í∞ÄÍ≤© Ïù¥ÏÉÅ Îç∞Ïù¥ÌÑ∞:');
console.log(`Ï¥ù ${priceIssues.length}Í∞ú Î∞úÍ≤¨\n`);

if (priceIssues.length > 0) {
  priceIssues.forEach((p, i) => {
    console.log(`${i+1}. [${p.brand}] ${p.title}`);
    console.log(`   Í∞ÄÍ≤©: ${p.price}Ïõê (ÌÉÄÏûÖ: ${typeof p.price})`);
    console.log(`   URL: ${p.productUrl}`);
    console.log('');
  });
}

// ÌÜµÍ≥Ñ Î∂ÑÏÑù
const validPrices = data.filter(p => p.price > 0).map(p => p.price);
const stats = {
  total: data.length,
  min: Math.min(...validPrices),
  max: Math.max(...validPrices),
  avg: Math.round(validPrices.reduce((sum, p) => sum + p, 0) / validPrices.length),
  median: validPrices.sort((a, b) => a - b)[Math.floor(validPrices.length / 2)],
  zero: data.filter(p => p.price === 0).length,
  negative: data.filter(p => p.price < 0).length,
  tooHigh: data.filter(p => p.price > 10000000).length
};

console.log('='.repeat(60));
console.log('üìà Í∞ÄÍ≤© ÌÜµÍ≥Ñ:');
console.log('='.repeat(60));
console.log(`ÏµúÏ†ÄÍ∞Ä: ${stats.min.toLocaleString()}Ïõê`);
console.log(`ÏµúÍ≥†Í∞Ä: ${stats.max.toLocaleString()}Ïõê`);
console.log(`ÌèâÍ∑†Í∞Ä: ${stats.avg.toLocaleString()}Ïõê`);
console.log(`Ï§ëÍ∞ÑÍ∞í: ${stats.median.toLocaleString()}Ïõê`);
console.log(`0Ïõê Ï†úÌíà: ${stats.zero}Í∞ú`);
console.log(`ÏùåÏàò Í∞ÄÍ≤©: ${stats.negative}Í∞ú`);
console.log(`1Ï≤úÎßåÏõê Ï¥àÍ≥º: ${stats.tooHigh}Í∞ú`);

// Î∏åÎûúÎìúÎ≥Ñ Í∞ÄÍ≤© ÌÜµÍ≥Ñ
console.log('\n' + '='.repeat(60));
console.log('üè™ Î∏åÎûúÎìúÎ≥Ñ Í∞ÄÍ≤© ÌÜµÍ≥Ñ:');
console.log('='.repeat(60));

const brands = [...new Set(data.map(p => p.brand))];
brands.forEach(brand => {
  const brandProducts = data.filter(p => p.brand === brand && p.price > 0);
  if (brandProducts.length > 0) {
    const prices = brandProducts.map(p => p.price);
    const brandAvg = Math.round(prices.reduce((sum, p) => sum + p, 0) / prices.length);
    const brandMin = Math.min(...prices);
    const brandMax = Math.max(...prices);
    console.log(`\n[${brand}] (${brandProducts.length}Í∞ú Ï†úÌíà)`);
    console.log(`  ÌèâÍ∑†: ${brandAvg.toLocaleString()}Ïõê`);
    console.log(`  Î≤îÏúÑ: ${brandMin.toLocaleString()}Ïõê ~ ${brandMax.toLocaleString()}Ïõê`);
  }
});

// Í∞ÄÍ≤©ÎåÄÎ≥Ñ Î∂ÑÌè¨
console.log('\n' + '='.repeat(60));
console.log('üí∞ Í∞ÄÍ≤©ÎåÄÎ≥Ñ Î∂ÑÌè¨:');
console.log('='.repeat(60));

const ranges = [
  { name: '10ÎßåÏõê ÎØ∏Îßå', min: 0, max: 100000 },
  { name: '10Îßå~50ÎßåÏõê', min: 100000, max: 500000 },
  { name: '50Îßå~100ÎßåÏõê', min: 500000, max: 1000000 },
  { name: '100Îßå~200ÎßåÏõê', min: 1000000, max: 2000000 },
  { name: '200Îßå~500ÎßåÏõê', min: 2000000, max: 5000000 },
  { name: '500ÎßåÏõê Ïù¥ÏÉÅ', min: 5000000, max: Infinity }
];

ranges.forEach(range => {
  const count = data.filter(p => p.price >= range.min && p.price < range.max).length;
  const percentage = ((count / data.length) * 100).toFixed(1);
  console.log(`${range.name}: ${count}Í∞ú (${percentage}%)`);
});

// ÏùòÏã¨Ïä§Îü¨Ïö¥ Í∞ÄÍ≤© Ìå®ÌÑ¥
console.log('\n' + '='.repeat(60));
console.log('‚ö†Ô∏è  ÏùòÏã¨Ïä§Îü¨Ïö¥ Í∞ÄÍ≤© Ìå®ÌÑ¥:');
console.log('='.repeat(60));

const suspiciousPatterns = {
  roundNumbers: data.filter(p => p.price > 0 && p.price % 1000000 === 0 && p.price >= 1000000),
  oddLowPrices: data.filter(p => p.price > 0 && p.price < 10000),
  possibleErrors: data.filter(p => {
    const priceStr = p.price.toString();
    return priceStr.length > 7 || priceStr.includes('99999') || priceStr.includes('00000');
  })
};

console.log(`\nÏ†ïÌôïÌûà Î∞±ÎßåÏõê Îã®ÏúÑ: ${suspiciousPatterns.roundNumbers.length}Í∞ú`);
if (suspiciousPatterns.roundNumbers.length > 0) {
  suspiciousPatterns.roundNumbers.slice(0, 5).forEach(p => {
    console.log(`  - [${p.brand}] ${p.title}: ${p.price.toLocaleString()}Ïõê`);
  });
}

console.log(`\n1ÎßåÏõê ÎØ∏Îßå Ï†ÄÍ∞Ä: ${suspiciousPatterns.oddLowPrices.length}Í∞ú`);
if (suspiciousPatterns.oddLowPrices.length > 0) {
  suspiciousPatterns.oddLowPrices.forEach(p => {
    console.log(`  - [${p.brand}] ${p.title}: ${p.price.toLocaleString()}Ïõê`);
  });
}

console.log(`\nÏò§Î•ò Í∞ÄÎä•ÏÑ± ÏûàÎäî Ìå®ÌÑ¥: ${suspiciousPatterns.possibleErrors.length}Í∞ú`);
if (suspiciousPatterns.possibleErrors.length > 0) {
  suspiciousPatterns.possibleErrors.slice(0, 10).forEach(p => {
    console.log(`  - [${p.brand}] ${p.title}: ${p.price.toLocaleString()}Ïõê`);
  });
}

console.log('\n' + '='.repeat(60));
console.log('‚úÖ Î∂ÑÏÑù ÏôÑÎ£å');
console.log('='.repeat(60));
